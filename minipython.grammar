Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]] ; 

Tokens
	def = 'def';
	l_par = '(';
	r_par = ')';
	semi = ':';
	assign = '=';
	comma=',';
	tab = 9;
	if = 'if';
	while = 'while';
	for = 'for';
	in = 'in';
	return = 'return';
	print = 'print';
	assign_minus = '-=';
	assign_div = '/=';
	l_br = '[';
	r_br = ']';
	assert = 'assert';
	plus = '+';
	minus = '-';
	mult = '*';
	multmult = '**';
	div = '/';
	mod = '%';
	open = 'open';
	type = 'type';
	max = 'max';
	min = 'min';
	and = 'and';
	or = 'or';
	not = 'not';
	less = '<';
	great = '>';
	geq = '>=';
	leq = '<=';
	eq = '==';
	neq = '!=';
	true = 'true';
	false = 'false';
	dot = '.';
	none = 'None';
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = '"' not_eol* '"' | ''' not_eol* ''';
	blank = (' ' | lf | cr);
	
Ignored Tokens
	blank, line_comment;

Productions
	goal = commands*;
	
	commands = {fun} function | 
	           {stat} statement;
			   
	function = def id l_par argument? r_par semi statement;
	argument = id assign_v? comma_assign*;
	comma_assign = comma id assign_v? ;
	assign_v = assign value;
	
	statement = {if} tab* if comparison_or semi statement |
			    {while} tab* while comparison_or semi statement |
				{for} tab* for [forid]:id in [inid]:id semi statement |
				{return} tab* return expression |
				{print} tab* print expression comma_exp* |
				{assign} tab* id assign expression |
				{assignmin} tab* id assign_minus expression |
				{assigndiv} tab* id assign_div expression |
				{list} tab* id l_br [lbr]:expression r_br assign [rbr]:expression |
				{assert} tab* assert expression comma_exp? |
				{func} tab* function_call;
	
	
	expression = {expr_mod} expression_mod|
				 {minus} expression_mod minus expression | 
				 {add} expression_mod plus expression;
	expression_mod = {expr_multmult} expression_multmult|
					 {mod} expression_multmult mod expression_mod |
					 {div} expression_multmult div expression_mod |
					 {mult} expression_multmult mult expression_mod;	  
	expression_multmult = {expr} expr|
						  {multmult} expr multmult expression_multmult;
	expr = {sth} something |
		   {listexp} id l_br expression r_br|
		   {open} open l_par [lpar]:expression comma [rpar]:expression r_par|
		   {list_con} l_br expression comma_exp* r_br;
	something = {func_call} function_call|
				{value} value|
				{id} id| 			
				{type} type l_par id r_par|
				{max} max l_par value comma_v+ r_par|
				{min} min l_par value comma_v+ r_par|
				{par} l_par expression r_par;
	comma_v = comma value;
	
	
	comparison_or = {comp} comparison_and |
					{or} comparison_or or comparison_and;
	comparison_and = {not_comp} not_comp |
					 {and} comparison_and and not_comp;
	not_comp = {comp} comp |
			   {not} not not_comp;
	comp = {true} true|
		   {false} false|
		   {less} [lpar]:expression less [rpar]:expression|
		   {great} [lpar]:expression great [rpar]:expression|
		   {geq} [lpar]:expression geq [rpar]:expression|
		   {leq} [lpar]:expression leq [rpar]:expression|
		   {neq} [lpar]:expression neq [rpar]:expression|
		   {eq} [lpar]:expression eq [rpar]:expression;
				 
			
	function_call = id l_par arglist? r_par;
	
	arglist = expression comma_exp*;
	comma_exp = comma expression;
	
	value = {method} id dot function_call |
		    {num} number | 
			{string} string |
			{none} none;
	
	num = number;
	
	ident = id;
	
